<?php

namespace Mintreu\LaravelProductCatalogue\Filament\Resources\ProductResource\Pages;


use Filament\Actions;
use Filament\Forms\Components\Select;
use Filament\Infolists\Components\Grid;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\Tabs;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\ViewRecord;
use Illuminate\Database\Eloquent\Model;
use Mintreu\LaravelProductCatalogue\Casts\ProductTypeCast;
use Mintreu\LaravelProductCatalogue\Filament\Resources\ProductResource;
use Mintreu\Toolkit\Casts\PublishableStatusCast;

class ViewProduct extends ViewRecord
{
    protected static string $resource = ProductResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\EditAction::make(),

            Actions\Action::make('status_changer')
                ->form([
                    Select::make('status')
                    ->options(
                        collect(PublishableStatusCast::cases())
                            ->mapWithKeys(fn($case) => [$case->value => $case->getLabel()])
                    )
                ])->action(function ($data){
                    $this->record->fill(['status' => $data['status']])->save();

                    Notification::make()->title('Status Update Successfully')->success()->send();
                })


        ];
    }

    public function getRelationManagers(): array
    {
        $relationManagers = [];
        if ($this->record->type === ProductTypeCast::CONFIGURABLE) {
            $relationManagers[] = ProductResource\RelationManagers\VariantsRelationManager::class;
        }else{
            $relationManagers[] = ProductResource\RelationManagers\TiersRelationManager::class;
        }

        return $relationManagers;
    }


    public function mount(int|string $record): void
    {

        $this->record = $this->resolveRecord($record);

        $this->authorizeAccess();

//        if (! $this->hasInfolist()) {
//            $this->fillForm();
//        }

      //  $this->form->fill($this->record->toArray());



      // parent::mount($record); // TODO: Change the autogenerated stub
      //  dd($record,$this->record);
    }


    public function infolist(Infolist $infolist): Infolist
    {
        return parent::infolist($infolist)
            ->schema([

                Tabs::make('Product')
                    ->tabs([
                        Tabs\Tab::make('Primary')
                            ->schema([
                                Section::make('Primary Information')
                                    ->aside()
                                    ->description('Required for product page management')
                                    ->schema([
                                        Grid::make()
                                            ->schema([
                                                TextEntry::make('name')
                                                    ->size('lg')
                                                    ->weight('bold')
                                                    ->icon('heroicon-o-tag'),

                                                TextEntry::make('sku')
                                                    ->copyable()
                                                    ->copyMessage('SKU copied!'),

                                                TextEntry::make('url')
                                                    ->label('URL Slug')
                                                    ->copyable()
                                                    ->copyMessage('URL copied!')
                                                    ->formatStateUsing(fn($state) => "/{$state}")
                                                    ->color('info'),

                                                TextEntry::make('status')
                                                    ->badge()
                                                    ->color(fn($state) => $state ? $state->getColor() : 'gray')
                                                    ->icon(fn($state) => $state ? $state->getIcon() : ''),

                                                TextEntry::make('category.name')
                                                    ->label('Category')
                                                    ->badge()
                                                    ->color('success')
                                                    ->icon('heroicon-o-folder'),

                                                TextEntry::make('type')
                                                    ->badge(),

                                                TextEntry::make('filterGroup.name')
                                                    ->label('Filter Group')
                                                    ->badge()
                                                    ->color('primary')
                                                    ->icon('heroicon-o-funnel'),
                                            ])
                                            ->columns(2),
                                    ]),
                            ]),

                        Tabs\Tab::make('About')
                            ->schema([
                                TextEntry::make('short_description')
                                    ->markdown()
                                    ->columnSpanFull(),
                                TextEntry::make('description')
                                    ->markdown()
                                    ->columnSpanFull(),
                            ]),

                        Tabs\Tab::make('Media')
                            ->schema([

                            ]),

                        Tabs\Tab::make('Price')
                            ->schema([
                                Section::make()
                                    ->aside()
                                    ->heading('Price')
                                    ->description('pricing details for the product')
                                    ->schema([
//                                        TextEntry::make('price')
//                                            ->label('Base Price')
//                                            ->formatStateUsing(fn($state) => '$' . number_format($state, 2))
//                                            ->color('success')
//                                            ->size('xl')
//                                            ->weight('bold')
//                                            ->icon('heroicon-o-currency-dollar')
//                                            ->iconColor('success'),
//
//                                        Grid::make()
//                                            ->schema(function ($record) {
//                                                $bulkPricing = $record->bulkPricing()->orderBy('quantity')->get();
//
//                                                if ($bulkPricing->isEmpty()) {
//                                                    return [
//                                                        TextEntry::make('no_bulk_pricing')
//                                                            ->state('No bulk pricing options available')
//                                                            ->color('gray')
//                                                            ->icon('heroicon-o-information-circle'),
//                                                    ];
//                                                }
//
//                                                return $bulkPricing->map(function ($price) use ($record) {
//                                                    $basePrice = $record->price;
//                                                    $discount = (($basePrice - $price->price) / $basePrice) * 100;
//
//                                                    return Grid::make()
//                                                        ->schema([
//                                                            TextEntry::make("bulk_price_{$price->id}_quantity")
//                                                                ->label('Quantity Threshold')
//                                                                ->state($price->quantity . '+ units')
//                                                                ->icon('heroicon-o-cube')
//                                                                ->iconColor('primary'),
//
//                                                            TextEntry::make("bulk_price_{$price->id}_price")
//                                                                ->label('Price per Unit')
//                                                                ->state('$' . number_format($price->price, 2))
//                                                                ->icon('heroicon-o-currency-dollar')
//                                                                ->color('success'),
//
//                                                            TextEntry::make("bulk_price_{$price->id}_savings")
//                                                                ->label('Savings')
//                                                                ->state(round($discount) . '% off')
//                                                                ->icon('heroicon-o-arrow-trending-down')
//                                                                ->color($discount >= 10 ? 'success' : 'primary')
//                                                                ->badge(),
//                                                        ])
//                                                        ->columns(3);
//                                                })->toArray();
//                                            })
//                                            ->columns(1)
//                                            ->columnSpanFull(),
                                    ]),
                            ]),

                        Tabs\Tab::make('Filters')
                            ->schema([

                                Section::make()
                                    ->aside()->columns(2)
                                    ->heading('Product filters')
                                    ->description('All filters from the selected group must be configured.')
                                    ->schema(function (Model $record) {

                                        $record->loadMissing('filterGroup.filters.options');
                                        // Different display for configurable vs simple products
                                        if ($record->type === 'configurable' && !$record->parent_id) {
                                            // Use the optimized filterOptionsGrouped method
                                            $groupedOptions = $record->filterOptionsGrouped();

                                            // Create compact display for each filter group
                                            $components = [];
                                            foreach ($groupedOptions as $filterId => $group) {
                                                $components[] = TextEntry::make("filter_{$filterId}")
                                                    ->label($group['filter']->name)
                                                    ->state($group['options']->pluck('value')->toArray())
                                                    ->badge();
                                            }

                                            return $components;
                                        } else {
                                            // For simple products or variants, display the assigned filter options
                                            return $record->filterGroup->filters->map(function ($filter) use ($record) {
                                                $selectedOption = $record->filterOptions
                                                    ->where('filter_id', $filter->id)
                                                    ->first();

                                                return TextEntry::make("filter_options.{$filter->id}")
                                                    ->label($filter->name)
                                                    ->getStateUsing(fn() => $selectedOption?->value ?? 'N/A')
                                                    ->badge()
                                                    ->color('success');
                                            })->toArray();
                                        }
                                    }),
                            ]),

                    ])
                    //->persistTabInQueryString()
                    ->contained(false)
                    ->columnSpanFull(),


            ]);
    }


}
