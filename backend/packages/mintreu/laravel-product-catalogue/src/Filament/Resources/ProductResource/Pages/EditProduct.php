<?php

namespace Mintreu\LaravelProductCatalogue\Filament\Resources\ProductResource\Pages;


use App\Models\TaxCode;
use Awcodes\Shout\Components\Shout;
use Awcodes\TableRepeater\Components\TableRepeater;
use Awcodes\TableRepeater\Header;
use CodeWithDennis\FilamentSelectTree\SelectTree;
use Filament\Actions;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Resources\Pages\EditRecord;
use FilamentTiptapEditor\TiptapEditor;
use Illuminate\Support\HtmlString;
use Mintreu\LaravelMoney\Filament\Forms\Components\MoneyInput;
use Mintreu\LaravelMoney\LaravelMoney;
use Mintreu\LaravelProductCatalogue\Casts\ProductTypeCast;
use Mintreu\LaravelProductCatalogue\Filament\Resources\ProductResource;
use Mintreu\LaravelProductCatalogue\Models\FilterGroup;
use Mintreu\LaravelProductCatalogue\Services\ProductUpdateService;


class EditProduct extends EditRecord
{
    protected static string $resource = ProductResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }


    public function getRelationManagers(): array
    {
        $relationManagers = [];
        if ($this->record->type == 'configurable') {
            $relationManagers[] = ProductResource\RelationManagers\VariantsRelationManager::class;
        }

        return $relationManagers;
    }


    public function mount(int|string $record): void
    {
        parent::mount($record);

        $this->record->load([
            'filterOptions',
            'filterOptions.filter',
        ]);
        if ($this->record->type == ProductTypeCast::CONFIGURABLE)
        {
            $this->record->load('variants.filterOptions.filter');
        }

        $data = $this->record->toArray();

        if ($this->record->type == ProductTypeCast::CONFIGURABLE) {
            // Collect all unique filter options from all variants
            $variantFilterOptions = $this->record->variants
                ->flatMap(fn($variant) => $variant->filterOptions)
                ->unique('id');

            // Group them by filter ID and collect option IDs (array of IDs per filter)
            $filterOptionData = $variantFilterOptions
                ->groupBy(fn($option) => $option->filter->id)
                ->map(fn($group) => $group->pluck('id')->unique()->values()->toArray())
                ->toArray();
        } else {
            // For non-configurable: single option per filter
            $filterOptionData = collect($this->record->filterOptions)
                ->mapWithKeys(function ($option) {
                    return [
                        $option->filter->id => $option->id,
                    ];
                })->toArray();
        }

//
//
//        if ($this->record->type == ProductTypeCast::CONFIGURABLE)
//        {
//
//        }else{
//            // Correctly build nested 'filter_options' array
//            $filterOptionData = collect($this->record->filterOptions)->mapWithKeys(function ($option) {
//                return [
//                    $option->filter->id => $option->id,
//                ];
//            })->toArray();
//        }



        // Inject under 'filter_options' key
        $data['filter_options'] = $filterOptionData;

        $this->form->fill($data);
    }



    public function save(bool $shouldRedirect = true, bool $shouldSendSavedNotification = true): void
    {


         $this->record = ProductUpdateService::make($this->record)->update($this->form->getState());
         //dd($this->record);
         parent::save($shouldRedirect, $shouldSendSavedNotification); // TODO: Change the autogenerated stub
    }






    public function form(Form $form): Form
    {
        return parent::form($form)
            ->schema([
                Forms\Components\Tabs::make('Heading')
                    ->columnSpanFull()
                    ->contained(false)
                    ->tabs([
                        Forms\Components\Tabs\Tab::make('General')
                            ->columns()
                            ->schema([
                                // Basic product info: name, slug, type, status
                                Forms\Components\TextInput::make('name')
                                    ->required()
                                    ->maxLength(255)
                                    ->default('Unnamed Product'),

                                Forms\Components\TextInput::make('url')
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\TextInput::make('type')
                                    ->required()
                                    ->maxLength(255),



                            ]),

                        Forms\Components\Tabs\Tab::make('Details')
                            ->schema([
                                // Description, brand, tags, SKU, barcode, short/long description

                                Forms\Components\Textarea::make('short_description')
                                    ->columnSpanFull(),

                                TiptapEditor::make('description')
                                    ->columnSpanFull(),
                            ]),

                        Forms\Components\Tabs\Tab::make('Pricing')
                            ->columns()
                            ->schema([
                                // Price, special price, tax class, cost, discount logic

                                Forms\Components\Grid::make(1)
                                    ->columnSpan(1)
                                    ->schema([
                                        Forms\Components\Select::make('tax_code_id')
                                            ->label('HSN Code')
                                            ->relationship('tax_code','code')
                                            ->live()
                                            ->columnSpanFull()
                                            ->required(),

                                        Forms\Components\Toggle::make('is_tax_inclusive')->default(false),
                                        Forms\Components\Toggle::make('is_exempted')->default(false),




                                        MoneyInput::make('price')
                                            ->label('Price')
                                            ->placeholder('Enter Price (e.g., 10025)')
                                            ->prefix(LaravelMoney::defaultCurrency())
                                            ->helperText('Enter amount in rupees. Decimals allowed.'),




                                        Forms\Components\TextInput::make('reward_point')
                                            ->required()
                                            ->numeric()
                                            ->default(0),

                                    ]),






                                Forms\Components\Placeholder::make('price_breakdown')
                                    ->content(function (Get $get) {
                                        if ($get('tax_code_id')) {
                                            $model = config('laravel-product-catalogue.tax.model');
                                            $taxCode = $model::find($get('tax_code_id'));

                                            if (! $taxCode) {
                                                return new HtmlString('<div class="p-4 border rounded-xl italic">Tax code not found.</div>');
                                            }

                                            $content = "
                                                <div class='p-3 border rounded-xl text-sm leading-relaxed'>
                                                    <div class='font-semibold text-base border-b pb-2 mb-3'>Tax Breakdown</div>
                                                    <table class='w-full border-separate' style='border-spacing: 0 6px;'>
                                                        <tbody>
                                                            <tr>
                                                                <td class='w-1/3 font-medium align-top'>HSN/SAC Code</td>
                                                                <td class='align-top'>{$taxCode->code}</td>
                                                            </tr>
                                                            <tr>
                                                                <td class='font-medium align-top'>Type</td>
                                                                <td class='align-top'>{$taxCode->type->getLabel()}</td>
                                                            </tr>
                                                            <tr>
                                                                <td class='font-medium align-top'>Description</td>
                                                                <td class='align-top'>{$taxCode->description}</td>
                                                            </tr>

                                                            <tr><td colspan='2'><hr class='my-2'></td></tr>

                                                            <tr>
                                                                <td class='font-medium align-top'>CGST</td>
                                                                <td class='align-top'>{$taxCode->cgst_rate}%</td>
                                                            </tr>
                                                            <tr>
                                                                <td class='font-medium align-top'>SGST</td>
                                                                <td class='align-top'>{$taxCode->sgst_rate}%</td>
                                                            </tr>
                                                            <tr>
                                                                <td class='font-medium align-top'>IGST</td>
                                                                <td class='align-top'>{$taxCode->igst_rate}%</td>
                                                            </tr>
                                                            <tr>
                                                                <td class='font-medium align-top'>CESS</td>
                                                                <td class='align-top'>{$taxCode->cess_rate}%</td>
                                                            </tr>

                                                            <tr><td colspan='2'><hr class='my-2'></td></tr>

                                                            <tr>
                                                                <td class='font-medium align-top'>Status</td>
                                                                <td class='align-top'>" . ($taxCode->is_active ? 'Active' : 'Inactive') . "</td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            ";

                                            return new HtmlString($content);
                                        }

                                        return new HtmlString('<div class="p-4 border rounded-xl italic">No tax code selected.</div>');
                                    })
                                    ->columnSpan(1),


                                Forms\Components\TextInput::make('min_quantity')
                                    ->required()
                                    ->numeric()
                                    ->default(0),

                                Forms\Components\TextInput::make('max_quantity')
                                    ->required()
                                    ->numeric()
                                    ->default(0),





                            ]),

                        Forms\Components\Tabs\Tab::make('Inventory')
                            ->schema([
                                // Quantity, stock status, backorders, low stock threshold
                            ]),

                        Forms\Components\Tabs\Tab::make('Media')
                            ->schema([
                                // Images, gallery, video
                                Forms\Components\SpatieMediaLibraryFileUpload::make('display')
                                    ->collection('displayImage'),

                                Forms\Components\SpatieMediaLibraryFileUpload::make('banner')
                                    ->multiple()
                                    ->collection('bannerImage'),
                            ]),

                        Forms\Components\Tabs\Tab::make('Shipping')
                            ->columns()
                            ->schema([
                                // Weight, dimensions, shipping class, free shipping flag
                                Forms\Components\TextInput::make('width')
                                    ->numeric(),
                                Forms\Components\TextInput::make('height')
                                    ->numeric(),
                                Forms\Components\TextInput::make('length')
                                    ->numeric(),
                                Forms\Components\TextInput::make('weight')
                                    ->numeric(),

                            ]),



                        Forms\Components\Tabs\Tab::make('Configuration')
                            ->schema([
                                Forms\Components\Grid::make(1)
                                    ->schema([
                                        Forms\Components\Select::make('filter_group_id')
                                            ->label(__('Filter Group'))
                                            ->relationship('filterGroup','name')
                                            ->live()
                                            ->required(),


                                        Shout::make('Caution')
                                            ->color('danger')
                                            ->visible(fn(Get $get) => $get('filter_group_id') != $this->record->filter_group_id)
                                            ->content(new HtmlString(
                                                '<strong>Warning:</strong> Changing the filter group will <span style="text-decoration: underline;">permanently delete</span> all existing variants and create new ones based on the selected options.'
                                            )),

                                    ])
                                    ->columnSpanFull(),

                                Forms\Components\Fieldset::make('Options')
                                    ->label(fn() => $this->record->type == ProductTypeCast::CONFIGURABLE ? 'Options' : 'Filter Options')
                                    ->columns(2)
                                    ->schema(fn(Get $get) => $this->getFilterSchema($get('filter_group_id'))),


                                SelectTree::make('categories')
                                    ->lazy()
                                    ->relationship('categories', 'name', 'parent_id', function ($query, Get $get) {
                                        return $query->where('status', true);
                                    }),



                                Forms\Components\KeyValue::make('meta_data')
                                    ->label(fn () => new HtmlString('Meta Data (SEO)'))
                                    ->keyLabel('Key')
                                    ->valueLabel('Value')
                                    ->addActionLabel('Add Meta Item')
                                    ->reorderable()
                                    ->keyPlaceholder('Enter key...')
                                    ->valuePlaceholder('Enter value...')
                                    ->helperText('You can define key-value pairs for metadata.')
                                    ->required(false)
                                    ->columnSpanFull()
                                    ->extraAttributes([
                                        'class' => 'p-2',
                                    ])
                                    ->addable(true)
                                    ->deletable(true)
                                    ->reorderable(true)
                                    ->default([])
                                    ->columnSpanFull(),




                            ]),

                        Forms\Components\Tabs\Tab::make('Relations')
                            ->schema([
                                // Related products, upsells, cross-sells, bundles

                                SelectTree::make('categories')
                                    ->live()
                                    ->relationship('categories', 'name', 'parent_id', function ($query, Get $get) {
//                                        $categoryId = $get('category_id');
//
//                                        if ($categoryId) {
//                                            $descendantIds = Category::find($categoryId)?->descendants()->pluck('id') ?? [];
//
//                                            return $query->whereIn('id', $descendantIds)
//                                                ->orWhere('id', $categoryId) // Include selected category itself
//                                                ->orderBy('parent_id'); // Maintain hierarchy
//                                        }

                                        return $query->where('status', true);
                                    }),



                            ]),
                    ]),




            ]);
    }





    protected function getFilterSchema(?int $filterGroupId = null): array
    {

        return !is_null($filterGroupId) ?  $this->getFilterDetails($filterGroupId) : [];
    }

    private function getFilterDetails(?int $filterGroupId = null): array
    {
        $filterGroup = FilterGroup::where('id', $filterGroupId)
            ->with('filters.options')
            ->get();

        return $filterGroup->flatMap(function ($group) {
            return $group->filters->map(function ($item) {
                $optionBag = $item->options->mapWithKeys(function ($item) {
                    return [$item['id'] => $item['value']];
                })->toArray();
                return Forms\Components\Select::make('filter_options.' . $item->id)
                    ->label($item->name)
                    ->options($optionBag)
                    ->required($item->is_required)
                    ->multiple(fn() => $this->record->type == ProductTypeCast::CONFIGURABLE)
                    ->default(3);
            });
        })->toArray();
    }







}
