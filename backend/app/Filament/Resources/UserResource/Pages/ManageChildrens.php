<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Casts\AuthStatusCast;


use App\Filament\Resources\UserResource;

use App\Models\User;
use Filament\Forms;
use Filament\Forms\Components\Wizard;
use Filament\Forms\Form;
use Filament\Resources\Pages\ManageRelatedRecords;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\HtmlString;
use STS\FilamentImpersonate\Tables\Actions\Impersonate;

class ManageChildrens extends ManageRelatedRecords
{

    protected static string $resource = UserResource::class;

    protected static string $relationship = 'children';

    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?string $breadcrumb = 'Manage Team Members';
    protected static ?string $title = 'Manage Team Members';

    public static function getNavigationLabel(): string
    {
        return 'Team';
    }

    public static function shouldRegisterNavigation(array $parameters = []): bool
    {
        if (filament()->auth()->user() instanceof User)
        {
            return filament()->auth()->user()->status == AuthStatusCast::SUBSCRIBED;
        }
        return parent::shouldRegisterNavigation($parameters); // TODO: Change the autogenerated stub
    }


    public static function getNavigationBadge(): ?string
    {
        return   (string) filament()->auth()->user()->descendants()->where('status',AuthStatusCast::SUBSCRIBED)->count() ;
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                    ->required()
                    ->maxLength(255),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->query(fn() => $this->record->children())
            ->modifyQueryUsing(fn($query) => $query->where('status',AuthStatusCast::SUBSCRIBED))
            ->recordTitleAttribute('name')
            ->columns([
                Tables\Columns\TextColumn::make('name'),
                Tables\Columns\TextColumn::make('email'),
                Tables\Columns\TextColumn::make('mobile'),
                Tables\Columns\TextColumn::make('referral_code'),
            ])
            ->emptyStateHeading('No team members')
            ->emptyStateDescription('Create a team member to get started.')
            ->filters([
                //
            ])
            ->headerActions([
//                Tables\Actions\CreateAction::make()
//                    ->form($this->getNewUserCreationForm())
//                    ->action(function (array $data,Table $table){
//                       // dd($data);
//                        $data['password'] = Hash::make($data['contact']);
//                        $data['parent_id'] = $this->record->id;
//                        // User Created
//                        $newUser = $this->record->children()->create($data);
//
//                        $this->form->model($newUser)->saveRelationships();
//
//                        dd($newUser->home_address);
//
//                        $postalCode = $newUser->home_address()->first()->postal_code;
//                        if ($postalCode)
//                        {
//                            // Set Address Pin as Default Password On Create New User
//                            $this->record->update(['password' => Hash::make($postalCode)]);
//                        }
//
//                        $this->redirect(self::$resource::getUrl('view',['record' => $newUser->referral_code]));
//
//                    }),


            ])
            ->actions([
//                Impersonate::make()
//                    ->model(fn(Model $record) => $record)
//                    ->requiresConfirmation()
//                    ->guard(PanelGuardCast::APP->getPanelGuard())
//                    ->visible(fn() => filament()->getCurrentPanel()->getId() == PanelGuardCast::ADMIN->value)
//                    ->failureRedirectUrl(fn() => self::$resource::getUrl())
//                    ->redirectTo(fn() => url(PanelGuardCast::APP->getPanelPath())),

                Tables\Actions\ViewAction::make()->url(fn(Model $record) => self::$resource::getUrl('view',['record' => $record->referral_code])),
//                Tables\Actions\EditAction::make(),
                //Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DissociateBulkAction::make(),
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }




    public function getNewUserCreationForm(): array
    {
        return [
            Wizard::make([
                Wizard\Step::make('Welcome')
                    ->schema($this->getParentSelectionFormSchema()),
                Wizard\Step::make('Creation')
                    ->icon('heroicon-s-user-circle')
                    ->columns(3)
                    ->schema($this->getUserCreationFormSchema()),
                Wizard\Step::make('Address')
                    ->icon('heroicon-s-map-pin')
                    ->columns(3)
                    ->schema($this->getAddressAccountFormSchema()),
                Wizard\Step::make('Finish')
                    ->schema($this->UserCreationFinalPreviewSchema()),
            ])->submitAction(new HtmlString(Blade::render(<<<BLADE
                        <x-filament::button
                            type="submit"
                            size="sm"
                        >
                            Submit
                        </x-filament::button>
                    BLADE)))
                ->columnSpanFull(),
        ];
    }



}
